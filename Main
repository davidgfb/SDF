vec3 cero = vec3(0);

// make this 1 is your machine is too slow
int AA = 2;

float sdPlane( vec3 p ) {
	return p.y;
}

float sdBox( vec3 p, vec3 b ) {
    vec3 d = abs(p) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float map( in vec3 pos ) {
    vec3 qos = vec3( fract(pos.x+0.5)-0.5, pos.yz );
    
    return min( sdPlane(     pos.xyz-cero),
                sdBox(       qos.xyz-vec3( 0.0,0.25, 0.0), vec3(0.2,0.5,0.2) ) );
}

//------------------------------------------------------------------

float calcSoftshadow(in vec3 ro, in vec3 rd, in float mint, in float tmax, int technique) {
	float res = 1.0, t = mint;
    
    for(int i=0; i<32; i++) {
		if(res>=1e-4 && t<=tmax) {
            float h = map(rd*t + ro);
            res = min( res, 10.0/t*h );        
            t += h;
        }               
    }
    
    res = clamp(res, 0.0, 1.0);
    
    return res*res*(-2.0*res + 3.0);
}

vec3 calcNormal(in vec3 pos) {
    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    return normalize( e.xyy*map( pos + e.xyy ) + 
					  e.yyx*map( pos + e.yyx ) + 
					  e.yxy*map( pos + e.yxy ) + 
					  e.xxx*map( pos + e.xxx ) );
}

float castRay( in vec3 ro, in vec3 rd ) {
    float tmin = 1.0, tmax = 20.0;
   

    // bounding volume
    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );
    float tp2 = (1.0-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.0 ) tmin = max( tmin, tp2 );
                                                 else           tmax = min( tmax, tp2 ); }

    
    float t = tmin;
    for( int i=0; i<64; i++ )
    {
	    float precis = 0.0005*t;
	    float res = map( ro+rd*t );
        if( res<precis || t>tmax ) break;
        t += res;
    }

    if( t>tmax ) t=-1.0;
    return t;
}

float calcAO( in vec3 pos, in vec3 nor ) {
	float occ = 0.0, sca = 1.0;
    for( int i=0; i<5; i++ )
    {
        float h = 0.001 + 0.15*float(i)/4.0;
        float d = map( pos + h*nor );
        occ += (h-d)*sca;
        sca *= 0.95;
    }
    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    
}

vec3 render( in vec3 ro, in vec3 rd, in int technique) { 
    vec3  col = vec3(0.0);
    float t = castRay(ro,rd);

    if( t>-0.5 ) {
        vec3 pos = ro + t*rd, nor = calcNormal( pos ),
        
        // material        
            mate = vec3(0.3),

        // key light
            lig = normalize( vec3(-0.1, 0.3, 0.6) ), hal = normalize( lig-rd );
        float dif = clamp( dot( nor, lig ), 0.0, 1.0 ) * 
            calcSoftshadow( pos, lig, 0.01, 3.0, technique ),
            spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)* dif *
            (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));
		        
        // ambient light
        float occ = calcAO( pos, nor ), amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );
               
        // fog
        col = (mate * 4.0*dif*vec3(1.00,0.70,0.5) + 12.0*spe*vec3(1.00,0.70,0.5) + 
            mate*amb*occ*vec3(0.0,0.08,0.1)) * exp( -5e-4*t*t*t );
    }

	return col;
}

mat3 setCamera( in vec3 ro, in vec3 ta, float cr ) {
	vec3 cw = normalize(ta-ro), cp = vec3(sin(cr), cos(cr),0.0),
        cu = normalize( cross(cw,cp) ), cv = normalize( cross(cu,cw) );
    
    return mat3( cu, cv, cw );
}

vec3 arriba = vec3(0,1,0);

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // camera	
    float an = -sin(iTime / 10.0) / 10.0 + 1.2;
    vec3 ro = vec3( 3.0*cos(an), 1.0, -3.0*sin(an) ),
        ta = -0.4 * arriba ; 
    // camera-to-world transformation
    mat3 ca = setCamera( ro, ta, 0.0 );

    int technique = (fract(iTime/2.0)>0.5) ? 1 : 0;

    vec3 tot = cero;

    for( int m=0; m<AA; m++ ) {
        for( int n=0; n<AA; n++ ) {
            // pixel coordinates
            vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5,
                p = (2.0*(fragCoord+o) - iResolution.xy) / iResolution.y;

            // ray direction
            vec3 rd = ca * normalize( vec3(p.xy,2.0) ),

            // render	
                col = render( ro, rd, technique);

            // gamma
            col = pow( col, vec3(0.4545) );

            tot += col;
        }
    }
    
    tot /= float(AA*AA);    
    fragColor = vec4( tot, 1.0 );
}
